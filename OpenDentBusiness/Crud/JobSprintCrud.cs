//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class JobSprintCrud {
		///<summary>Gets one JobSprint object from the database using the primary key.  Returns null if not found.</summary>
		public static JobSprint SelectOne(long jobSprintNum) {
			string command="SELECT * FROM jobsprint "
				+"WHERE JobSprintNum = "+POut.Long(jobSprintNum);
			List<JobSprint> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one JobSprint object from the database using a query.</summary>
		public static JobSprint SelectOne(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<JobSprint> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of JobSprint objects from the database using a query.</summary>
		public static List<JobSprint> SelectMany(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<JobSprint> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<JobSprint> TableToList(DataTable table) {
			List<JobSprint> retVal=new List<JobSprint>();
			JobSprint jobSprint;
			foreach(DataRow row in table.Rows) {
				jobSprint=new JobSprint();
				jobSprint.JobSprintNum           = PIn.Long  (row["JobSprintNum"].ToString());
				jobSprint.Title                  = PIn.String(row["Title"].ToString());
				jobSprint.Note                   = PIn.String(row["Note"].ToString());
				jobSprint.DateStart              = PIn.Date  (row["DateStart"].ToString());
				jobSprint.DateEndTarget          = PIn.Date  (row["DateEndTarget"].ToString());
				jobSprint.DateEndActual          = PIn.Date  (row["DateEndActual"].ToString());
				jobSprint.JobPercent             = PIn.Double(row["JobPercent"].ToString());
				jobSprint.HoursAverageDevelopment= PIn.Double(row["HoursAverageDevelopment"].ToString());
				jobSprint.HoursAverageBreak      = PIn.Double(row["HoursAverageBreak"].ToString());
				retVal.Add(jobSprint);
			}
			return retVal;
		}

		///<summary>Converts a list of JobSprint into a DataTable.</summary>
		public static DataTable ListToTable(List<JobSprint> listJobSprints,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="JobSprint";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("JobSprintNum");
			table.Columns.Add("Title");
			table.Columns.Add("Note");
			table.Columns.Add("DateStart");
			table.Columns.Add("DateEndTarget");
			table.Columns.Add("DateEndActual");
			table.Columns.Add("JobPercent");
			table.Columns.Add("HoursAverageDevelopment");
			table.Columns.Add("HoursAverageBreak");
			foreach(JobSprint jobSprint in listJobSprints) {
				table.Rows.Add(new object[] {
					POut.Long  (jobSprint.JobSprintNum),
					            jobSprint.Title,
					            jobSprint.Note,
					POut.DateT (jobSprint.DateStart,false),
					POut.DateT (jobSprint.DateEndTarget,false),
					POut.DateT (jobSprint.DateEndActual,false),
					POut.Double(jobSprint.JobPercent),
					POut.Double(jobSprint.HoursAverageDevelopment),
					POut.Double(jobSprint.HoursAverageBreak),
				});
			}
			return table;
		}

		///<summary>Inserts one JobSprint into the database.  Returns the new priKey.</summary>
		public static long Insert(JobSprint jobSprint) {
			return Insert(jobSprint,false);
		}

		///<summary>Inserts one JobSprint into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(JobSprint jobSprint,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				jobSprint.JobSprintNum=ReplicationServers.GetKey("jobsprint","JobSprintNum");
			}
			string command="INSERT INTO jobsprint (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="JobSprintNum,";
			}
			command+="Title,Note,DateStart,DateEndTarget,DateEndActual,JobPercent,HoursAverageDevelopment,HoursAverageBreak) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(jobSprint.JobSprintNum)+",";
			}
			command+=
				 "'"+POut.String(jobSprint.Title)+"',"
				+"'"+POut.String(jobSprint.Note)+"',"
				+    POut.Date  (jobSprint.DateStart)+","
				+    POut.Date  (jobSprint.DateEndTarget)+","
				+    POut.Date  (jobSprint.DateEndActual)+","
				+"'"+POut.Double(jobSprint.JobPercent)+"',"
				+"'"+POut.Double(jobSprint.HoursAverageDevelopment)+"',"
				+"'"+POut.Double(jobSprint.HoursAverageBreak)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				jobSprint.JobSprintNum=Db.NonQ(command,true,"JobSprintNum","jobSprint");
			}
			return jobSprint.JobSprintNum;
		}

		///<summary>Inserts one JobSprint into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(JobSprint jobSprint) {
			return InsertNoCache(jobSprint,false);
		}

		///<summary>Inserts one JobSprint into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(JobSprint jobSprint,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO jobsprint (";
			if(!useExistingPK && isRandomKeys) {
				jobSprint.JobSprintNum=ReplicationServers.GetKeyNoCache("jobsprint","JobSprintNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="JobSprintNum,";
			}
			command+="Title,Note,DateStart,DateEndTarget,DateEndActual,JobPercent,HoursAverageDevelopment,HoursAverageBreak) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(jobSprint.JobSprintNum)+",";
			}
			command+=
				 "'"+POut.String(jobSprint.Title)+"',"
				+"'"+POut.String(jobSprint.Note)+"',"
				+    POut.Date  (jobSprint.DateStart)+","
				+    POut.Date  (jobSprint.DateEndTarget)+","
				+    POut.Date  (jobSprint.DateEndActual)+","
				+"'"+POut.Double(jobSprint.JobPercent)+"',"
				+"'"+POut.Double(jobSprint.HoursAverageDevelopment)+"',"
				+"'"+POut.Double(jobSprint.HoursAverageBreak)+"')";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				jobSprint.JobSprintNum=Db.NonQ(command,true,"JobSprintNum","jobSprint");
			}
			return jobSprint.JobSprintNum;
		}

		///<summary>Updates one JobSprint in the database.</summary>
		public static void Update(JobSprint jobSprint) {
			string command="UPDATE jobsprint SET "
				+"Title                  = '"+POut.String(jobSprint.Title)+"', "
				+"Note                   = '"+POut.String(jobSprint.Note)+"', "
				+"DateStart              =  "+POut.Date  (jobSprint.DateStart)+", "
				+"DateEndTarget          =  "+POut.Date  (jobSprint.DateEndTarget)+", "
				+"DateEndActual          =  "+POut.Date  (jobSprint.DateEndActual)+", "
				+"JobPercent             = '"+POut.Double(jobSprint.JobPercent)+"', "
				+"HoursAverageDevelopment= '"+POut.Double(jobSprint.HoursAverageDevelopment)+"', "
				+"HoursAverageBreak      = '"+POut.Double(jobSprint.HoursAverageBreak)+"' "
				+"WHERE JobSprintNum = "+POut.Long(jobSprint.JobSprintNum);
			Db.NonQ(command);
		}

		///<summary>Updates one JobSprint in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(JobSprint jobSprint,JobSprint oldJobSprint) {
			string command="";
			if(jobSprint.Title != oldJobSprint.Title) {
				if(command!="") { command+=",";}
				command+="Title = '"+POut.String(jobSprint.Title)+"'";
			}
			if(jobSprint.Note != oldJobSprint.Note) {
				if(command!="") { command+=",";}
				command+="Note = '"+POut.String(jobSprint.Note)+"'";
			}
			if(jobSprint.DateStart.Date != oldJobSprint.DateStart.Date) {
				if(command!="") { command+=",";}
				command+="DateStart = "+POut.Date(jobSprint.DateStart)+"";
			}
			if(jobSprint.DateEndTarget.Date != oldJobSprint.DateEndTarget.Date) {
				if(command!="") { command+=",";}
				command+="DateEndTarget = "+POut.Date(jobSprint.DateEndTarget)+"";
			}
			if(jobSprint.DateEndActual.Date != oldJobSprint.DateEndActual.Date) {
				if(command!="") { command+=",";}
				command+="DateEndActual = "+POut.Date(jobSprint.DateEndActual)+"";
			}
			if(jobSprint.JobPercent != oldJobSprint.JobPercent) {
				if(command!="") { command+=",";}
				command+="JobPercent = '"+POut.Double(jobSprint.JobPercent)+"'";
			}
			if(jobSprint.HoursAverageDevelopment != oldJobSprint.HoursAverageDevelopment) {
				if(command!="") { command+=",";}
				command+="HoursAverageDevelopment = '"+POut.Double(jobSprint.HoursAverageDevelopment)+"'";
			}
			if(jobSprint.HoursAverageBreak != oldJobSprint.HoursAverageBreak) {
				if(command!="") { command+=",";}
				command+="HoursAverageBreak = '"+POut.Double(jobSprint.HoursAverageBreak)+"'";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE jobsprint SET "+command
				+" WHERE JobSprintNum = "+POut.Long(jobSprint.JobSprintNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(JobSprint,JobSprint) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(JobSprint jobSprint,JobSprint oldJobSprint) {
			if(jobSprint.Title != oldJobSprint.Title) {
				return true;
			}
			if(jobSprint.Note != oldJobSprint.Note) {
				return true;
			}
			if(jobSprint.DateStart.Date != oldJobSprint.DateStart.Date) {
				return true;
			}
			if(jobSprint.DateEndTarget.Date != oldJobSprint.DateEndTarget.Date) {
				return true;
			}
			if(jobSprint.DateEndActual.Date != oldJobSprint.DateEndActual.Date) {
				return true;
			}
			if(jobSprint.JobPercent != oldJobSprint.JobPercent) {
				return true;
			}
			if(jobSprint.HoursAverageDevelopment != oldJobSprint.HoursAverageDevelopment) {
				return true;
			}
			if(jobSprint.HoursAverageBreak != oldJobSprint.HoursAverageBreak) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one JobSprint from the database.</summary>
		public static void Delete(long jobSprintNum) {
			string command="DELETE FROM jobsprint "
				+"WHERE JobSprintNum = "+POut.Long(jobSprintNum);
			Db.NonQ(command);
		}

	}
}