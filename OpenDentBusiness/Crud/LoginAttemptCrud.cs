//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class LoginAttemptCrud {
		///<summary>Gets one LoginAttempt object from the database using the primary key.  Returns null if not found.</summary>
		public static LoginAttempt SelectOne(long loginAttemptNum) {
			string command="SELECT * FROM loginattempt "
				+"WHERE LoginAttemptNum = "+POut.Long(loginAttemptNum);
			List<LoginAttempt> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one LoginAttempt object from the database using a query.</summary>
		public static LoginAttempt SelectOne(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<LoginAttempt> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of LoginAttempt objects from the database using a query.</summary>
		public static List<LoginAttempt> SelectMany(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<LoginAttempt> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<LoginAttempt> TableToList(DataTable table) {
			List<LoginAttempt> retVal=new List<LoginAttempt>();
			LoginAttempt loginAttempt;
			foreach(DataRow row in table.Rows) {
				loginAttempt=new LoginAttempt();
				loginAttempt.LoginAttemptNum= PIn.Long  (row["LoginAttemptNum"].ToString());
				loginAttempt.UserName       = PIn.String(row["UserName"].ToString());
				loginAttempt.LoginType      = (OpenDentBusiness.UserWebFKeyType)PIn.Int(row["LoginType"].ToString());
				loginAttempt.DateTFail      = PIn.DateT (row["DateTFail"].ToString());
				retVal.Add(loginAttempt);
			}
			return retVal;
		}

		///<summary>Converts a list of LoginAttempt into a DataTable.</summary>
		public static DataTable ListToTable(List<LoginAttempt> listLoginAttempts,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="LoginAttempt";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("LoginAttemptNum");
			table.Columns.Add("UserName");
			table.Columns.Add("LoginType");
			table.Columns.Add("DateTFail");
			foreach(LoginAttempt loginAttempt in listLoginAttempts) {
				table.Rows.Add(new object[] {
					POut.Long  (loginAttempt.LoginAttemptNum),
					            loginAttempt.UserName,
					POut.Int   ((int)loginAttempt.LoginType),
					POut.DateT (loginAttempt.DateTFail,false),
				});
			}
			return table;
		}

		///<summary>Inserts one LoginAttempt into the database.  Returns the new priKey.</summary>
		public static long Insert(LoginAttempt loginAttempt) {
			return Insert(loginAttempt,false);
		}

		///<summary>Inserts one LoginAttempt into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(LoginAttempt loginAttempt,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				loginAttempt.LoginAttemptNum=ReplicationServers.GetKey("loginattempt","LoginAttemptNum");
			}
			string command="INSERT INTO loginattempt (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="LoginAttemptNum,";
			}
			command+="UserName,LoginType,DateTFail) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(loginAttempt.LoginAttemptNum)+",";
			}
			command+=
				 "'"+POut.String(loginAttempt.UserName)+"',"
				+    POut.Int   ((int)loginAttempt.LoginType)+","
				+    DbHelper.Now()+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				loginAttempt.LoginAttemptNum=Db.NonQ(command,true,"LoginAttemptNum","loginAttempt");
			}
			return loginAttempt.LoginAttemptNum;
		}

		///<summary>Inserts one LoginAttempt into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(LoginAttempt loginAttempt) {
			return InsertNoCache(loginAttempt,false);
		}

		///<summary>Inserts one LoginAttempt into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(LoginAttempt loginAttempt,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO loginattempt (";
			if(!useExistingPK && isRandomKeys) {
				loginAttempt.LoginAttemptNum=ReplicationServers.GetKeyNoCache("loginattempt","LoginAttemptNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="LoginAttemptNum,";
			}
			command+="UserName,LoginType,DateTFail) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(loginAttempt.LoginAttemptNum)+",";
			}
			command+=
				 "'"+POut.String(loginAttempt.UserName)+"',"
				+    POut.Int   ((int)loginAttempt.LoginType)+","
				+    DbHelper.Now()+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				loginAttempt.LoginAttemptNum=Db.NonQ(command,true,"LoginAttemptNum","loginAttempt");
			}
			return loginAttempt.LoginAttemptNum;
		}

		///<summary>Updates one LoginAttempt in the database.</summary>
		public static void Update(LoginAttempt loginAttempt) {
			string command="UPDATE loginattempt SET "
				+"UserName       = '"+POut.String(loginAttempt.UserName)+"', "
				+"LoginType      =  "+POut.Int   ((int)loginAttempt.LoginType)+" "
				//DateTFail not allowed to change
				+"WHERE LoginAttemptNum = "+POut.Long(loginAttempt.LoginAttemptNum);
			Db.NonQ(command);
		}

		///<summary>Updates one LoginAttempt in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(LoginAttempt loginAttempt,LoginAttempt oldLoginAttempt) {
			string command="";
			if(loginAttempt.UserName != oldLoginAttempt.UserName) {
				if(command!="") { command+=",";}
				command+="UserName = '"+POut.String(loginAttempt.UserName)+"'";
			}
			if(loginAttempt.LoginType != oldLoginAttempt.LoginType) {
				if(command!="") { command+=",";}
				command+="LoginType = "+POut.Int   ((int)loginAttempt.LoginType)+"";
			}
			//DateTFail not allowed to change
			if(command=="") {
				return false;
			}
			command="UPDATE loginattempt SET "+command
				+" WHERE LoginAttemptNum = "+POut.Long(loginAttempt.LoginAttemptNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(LoginAttempt,LoginAttempt) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(LoginAttempt loginAttempt,LoginAttempt oldLoginAttempt) {
			if(loginAttempt.UserName != oldLoginAttempt.UserName) {
				return true;
			}
			if(loginAttempt.LoginType != oldLoginAttempt.LoginType) {
				return true;
			}
			//DateTFail not allowed to change
			return false;
		}

		///<summary>Deletes one LoginAttempt from the database.</summary>
		public static void Delete(long loginAttemptNum) {
			string command="DELETE FROM loginattempt "
				+"WHERE LoginAttemptNum = "+POut.Long(loginAttemptNum);
			Db.NonQ(command);
		}

	}
}