//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class WebChatPrefCrud {
		///<summary>Gets one WebChatPref object from the database using the primary key.  Returns null if not found.</summary>
		public static WebChatPref SelectOne(long webChatPrefNum) {
			string command="SELECT * FROM webchatpref "
				+"WHERE WebChatPrefNum = "+POut.Long(webChatPrefNum);
			List<WebChatPref> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one WebChatPref object from the database using a query.</summary>
		public static WebChatPref SelectOne(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<WebChatPref> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of WebChatPref objects from the database using a query.</summary>
		public static List<WebChatPref> SelectMany(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<WebChatPref> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<WebChatPref> TableToList(DataTable table) {
			List<WebChatPref> retVal=new List<WebChatPref>();
			WebChatPref webChatPref;
			foreach(DataRow row in table.Rows) {
				webChatPref=new WebChatPref();
				webChatPref.WebChatPrefNum= PIn.Long  (row["WebChatPrefNum"].ToString());
				webChatPref.PrefName      = PIn.String(row["PrefName"].ToString());
				webChatPref.ValueString   = PIn.String(row["ValueString"].ToString());
				retVal.Add(webChatPref);
			}
			return retVal;
		}

		///<summary>Converts a list of WebChatPref into a DataTable.</summary>
		public static DataTable ListToTable(List<WebChatPref> listWebChatPrefs,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="WebChatPref";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("WebChatPrefNum");
			table.Columns.Add("PrefName");
			table.Columns.Add("ValueString");
			foreach(WebChatPref webChatPref in listWebChatPrefs) {
				table.Rows.Add(new object[] {
					POut.Long  (webChatPref.WebChatPrefNum),
					            webChatPref.PrefName,
					            webChatPref.ValueString,
				});
			}
			return table;
		}

		///<summary>Inserts one WebChatPref into the database.  Returns the new priKey.</summary>
		public static long Insert(WebChatPref webChatPref) {
			return Insert(webChatPref,false);
		}

		///<summary>Inserts one WebChatPref into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(WebChatPref webChatPref,bool useExistingPK) {
			string command="INSERT INTO webchatpref (";
			if(useExistingPK) {
				command+="WebChatPrefNum,";
			}
			command+="PrefName,ValueString) VALUES(";
			if(useExistingPK) {
				command+=POut.Long(webChatPref.WebChatPrefNum)+",";
			}
			command+=
				 "'"+POut.String(webChatPref.PrefName)+"',"
				+"'"+POut.String(webChatPref.ValueString)+"')";
			if(useExistingPK) {
				Db.NonQ(command);
			}
			else {
				webChatPref.WebChatPrefNum=Db.NonQ(command,true,"WebChatPrefNum","webChatPref");
			}
			return webChatPref.WebChatPrefNum;
		}

		///<summary>Inserts one WebChatPref into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(WebChatPref webChatPref) {
			return InsertNoCache(webChatPref,false);
		}

		///<summary>Inserts one WebChatPref into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(WebChatPref webChatPref,bool useExistingPK) {
			string command="INSERT INTO webchatpref (";
			if(useExistingPK) {
				command+="WebChatPrefNum,";
			}
			command+="PrefName,ValueString) VALUES(";
			if(useExistingPK) {
				command+=POut.Long(webChatPref.WebChatPrefNum)+",";
			}
			command+=
				 "'"+POut.String(webChatPref.PrefName)+"',"
				+"'"+POut.String(webChatPref.ValueString)+"')";
			if(useExistingPK) {
				Db.NonQ(command);
			}
			else {
				webChatPref.WebChatPrefNum=Db.NonQ(command,true,"WebChatPrefNum","webChatPref");
			}
			return webChatPref.WebChatPrefNum;
		}

		///<summary>Updates one WebChatPref in the database.</summary>
		public static void Update(WebChatPref webChatPref) {
			string command="UPDATE webchatpref SET "
				+"PrefName      = '"+POut.String(webChatPref.PrefName)+"', "
				+"ValueString   = '"+POut.String(webChatPref.ValueString)+"' "
				+"WHERE WebChatPrefNum = "+POut.Long(webChatPref.WebChatPrefNum);
			Db.NonQ(command);
		}

		///<summary>Updates one WebChatPref in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(WebChatPref webChatPref,WebChatPref oldWebChatPref) {
			string command="";
			if(webChatPref.PrefName != oldWebChatPref.PrefName) {
				if(command!="") { command+=",";}
				command+="PrefName = '"+POut.String(webChatPref.PrefName)+"'";
			}
			if(webChatPref.ValueString != oldWebChatPref.ValueString) {
				if(command!="") { command+=",";}
				command+="ValueString = '"+POut.String(webChatPref.ValueString)+"'";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE webchatpref SET "+command
				+" WHERE WebChatPrefNum = "+POut.Long(webChatPref.WebChatPrefNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(WebChatPref,WebChatPref) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(WebChatPref webChatPref,WebChatPref oldWebChatPref) {
			if(webChatPref.PrefName != oldWebChatPref.PrefName) {
				return true;
			}
			if(webChatPref.ValueString != oldWebChatPref.ValueString) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one WebChatPref from the database.</summary>
		public static void Delete(long webChatPrefNum) {
			string command="DELETE FROM webchatpref "
				+"WHERE WebChatPrefNum = "+POut.Long(webChatPrefNum);
			Db.NonQ(command);
		}

	}
}