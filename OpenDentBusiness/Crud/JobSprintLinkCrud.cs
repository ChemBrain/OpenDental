//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class JobSprintLinkCrud {
		///<summary>Gets one JobSprintLink object from the database using the primary key.  Returns null if not found.</summary>
		public static JobSprintLink SelectOne(long jobSprintLinkNum) {
			string command="SELECT * FROM jobsprintlink "
				+"WHERE JobSprintLinkNum = "+POut.Long(jobSprintLinkNum);
			List<JobSprintLink> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one JobSprintLink object from the database using a query.</summary>
		public static JobSprintLink SelectOne(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<JobSprintLink> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of JobSprintLink objects from the database using a query.</summary>
		public static List<JobSprintLink> SelectMany(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<JobSprintLink> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<JobSprintLink> TableToList(DataTable table) {
			List<JobSprintLink> retVal=new List<JobSprintLink>();
			JobSprintLink jobSprintLink;
			foreach(DataRow row in table.Rows) {
				jobSprintLink=new JobSprintLink();
				jobSprintLink.JobSprintLinkNum= PIn.Long  (row["JobSprintLinkNum"].ToString());
				jobSprintLink.JobNum          = PIn.Long  (row["JobNum"].ToString());
				jobSprintLink.JobSprintNum    = PIn.Long  (row["JobSprintNum"].ToString());
				retVal.Add(jobSprintLink);
			}
			return retVal;
		}

		///<summary>Converts a list of JobSprintLink into a DataTable.</summary>
		public static DataTable ListToTable(List<JobSprintLink> listJobSprintLinks,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="JobSprintLink";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("JobSprintLinkNum");
			table.Columns.Add("JobNum");
			table.Columns.Add("JobSprintNum");
			foreach(JobSprintLink jobSprintLink in listJobSprintLinks) {
				table.Rows.Add(new object[] {
					POut.Long  (jobSprintLink.JobSprintLinkNum),
					POut.Long  (jobSprintLink.JobNum),
					POut.Long  (jobSprintLink.JobSprintNum),
				});
			}
			return table;
		}

		///<summary>Inserts one JobSprintLink into the database.  Returns the new priKey.</summary>
		public static long Insert(JobSprintLink jobSprintLink) {
			return Insert(jobSprintLink,false);
		}

		///<summary>Inserts one JobSprintLink into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(JobSprintLink jobSprintLink,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				jobSprintLink.JobSprintLinkNum=ReplicationServers.GetKey("jobsprintlink","JobSprintLinkNum");
			}
			string command="INSERT INTO jobsprintlink (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="JobSprintLinkNum,";
			}
			command+="JobNum,JobSprintNum) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(jobSprintLink.JobSprintLinkNum)+",";
			}
			command+=
				     POut.Long  (jobSprintLink.JobNum)+","
				+    POut.Long  (jobSprintLink.JobSprintNum)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				jobSprintLink.JobSprintLinkNum=Db.NonQ(command,true,"JobSprintLinkNum","jobSprintLink");
			}
			return jobSprintLink.JobSprintLinkNum;
		}

		///<summary>Inserts one JobSprintLink into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(JobSprintLink jobSprintLink) {
			return InsertNoCache(jobSprintLink,false);
		}

		///<summary>Inserts one JobSprintLink into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(JobSprintLink jobSprintLink,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO jobsprintlink (";
			if(!useExistingPK && isRandomKeys) {
				jobSprintLink.JobSprintLinkNum=ReplicationServers.GetKeyNoCache("jobsprintlink","JobSprintLinkNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="JobSprintLinkNum,";
			}
			command+="JobNum,JobSprintNum) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(jobSprintLink.JobSprintLinkNum)+",";
			}
			command+=
				     POut.Long  (jobSprintLink.JobNum)+","
				+    POut.Long  (jobSprintLink.JobSprintNum)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				jobSprintLink.JobSprintLinkNum=Db.NonQ(command,true,"JobSprintLinkNum","jobSprintLink");
			}
			return jobSprintLink.JobSprintLinkNum;
		}

		///<summary>Updates one JobSprintLink in the database.</summary>
		public static void Update(JobSprintLink jobSprintLink) {
			string command="UPDATE jobsprintlink SET "
				+"JobNum          =  "+POut.Long  (jobSprintLink.JobNum)+", "
				+"JobSprintNum    =  "+POut.Long  (jobSprintLink.JobSprintNum)+" "
				+"WHERE JobSprintLinkNum = "+POut.Long(jobSprintLink.JobSprintLinkNum);
			Db.NonQ(command);
		}

		///<summary>Updates one JobSprintLink in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(JobSprintLink jobSprintLink,JobSprintLink oldJobSprintLink) {
			string command="";
			if(jobSprintLink.JobNum != oldJobSprintLink.JobNum) {
				if(command!="") { command+=",";}
				command+="JobNum = "+POut.Long(jobSprintLink.JobNum)+"";
			}
			if(jobSprintLink.JobSprintNum != oldJobSprintLink.JobSprintNum) {
				if(command!="") { command+=",";}
				command+="JobSprintNum = "+POut.Long(jobSprintLink.JobSprintNum)+"";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE jobsprintlink SET "+command
				+" WHERE JobSprintLinkNum = "+POut.Long(jobSprintLink.JobSprintLinkNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(JobSprintLink,JobSprintLink) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(JobSprintLink jobSprintLink,JobSprintLink oldJobSprintLink) {
			if(jobSprintLink.JobNum != oldJobSprintLink.JobNum) {
				return true;
			}
			if(jobSprintLink.JobSprintNum != oldJobSprintLink.JobSprintNum) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one JobSprintLink from the database.</summary>
		public static void Delete(long jobSprintLinkNum) {
			string command="DELETE FROM jobsprintlink "
				+"WHERE JobSprintLinkNum = "+POut.Long(jobSprintLinkNum);
			Db.NonQ(command);
		}

	}
}