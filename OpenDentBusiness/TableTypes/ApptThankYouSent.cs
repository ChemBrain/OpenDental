using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Xml.Serialization;

namespace OpenDentBusiness {
	///<summary>When a reminder is sent for an appointment a record of that send is stored here. This is used to prevent re-sends of the same 
	///Thank You.</summary>
	[Serializable,CrudTable(HasBatchWriteMethods=true)]
	public class ApptThankYouSent:TableBase {
		///<summary>Primary key.</summary>
		[CrudColumn(IsPriKey=true)]
		public long ApptThankYouSentNum;
		///<summary>FK to appointment.AptNum.</summary>
		public long ApptNum;
		///<summary>The Date and time of the original appointment. We need this in case the appointment was moved and needs another reminder sent out.</summary>
		[CrudColumn(SpecialType = CrudSpecialColType.DateT)]
		public DateTime ApptDateTime;
		///<summary>The Date and time of the original appointment. We need this in case the appointment was moved and needs another reminder sent out.</summary>
		[CrudColumn(SpecialType = CrudSpecialColType.DateT)]
		public DateTime ApptSecDateTEntry;
		///<summary>This was the TSPrior used to send this reminder. </summary>
		[XmlIgnore]
		[CrudColumn(SpecialType = CrudSpecialColType.TimeSpanLong)]
		public TimeSpan TSPrior;
		///<summary>FK to apptreminderrule.ApptReminderRuleNum. Allows us to look up the rules to determine how to send this apptcomm out.</summary>
		public long ApptReminderRuleNum;
		///<summary>Generated by HQ. Indicates whether or not we were able to send the text message.</summary>
		public bool IsSmsSent;
		/////<summary>Generated by HQ. Indicates whether or not we were able to send the e-mail.</summary>
		public bool IsEmailSent;
		///<summary>Generated by OD. If true then generate and send sms.</summary>
		public bool IsForSms;
		/////<summary>Generated by OD. If true then generate and send email.</summary>
		public bool IsForEmail;
		///<summary>FK to clinic.ClinicNum for the corresponding appointment.</summary>
		public long ClinicNum;
		///<summary>FK to patient.PatNum for the corresponding patient.</summary>
		public long PatNum;
		///<summary>Generated by OD.  Wireless phone number of the corresponding patient.</summary>
		public string PhonePat;
		///<summary>Generated by OD in some cases and HQ in others. Any human readable error message generated by either HQ or EConnector. Used for debugging.</summary>
		[CrudColumn(SpecialType=CrudSpecialColType.TextIsClob)]
		public string ResponseDescript;
		///<summary>FK to smstomobile.GuidMessage. Generated at HQ when the thankyou is generated.</summary>
		[CrudColumn(SpecialType=CrudSpecialColType.TextIsClob)]
		public string GuidMessageToMobile;
		///<summary>Generated by OD. OD proper can construct this to be any length. Will be converted to final MsgText and sent to patient once tags are 
		///replaced with real values.</summary>
		[CrudColumn(SpecialType=CrudSpecialColType.TextIsClob)]
		public string MsgTextToMobileTemplate;
		///<summary>Generated by HQ. Applied real text to tags from MsgTextTemplate.</summary>
		[CrudColumn(SpecialType=CrudSpecialColType.TextIsClob)]
		public string MsgTextToMobile;
		[CrudColumn(SpecialType = CrudSpecialColType.TextIsClob)]
		public string EmailSubjTemplate;
		///<summary>.</summary>
		[CrudColumn(SpecialType = CrudSpecialColType.TextIsClob)]
		public string EmailSubj;
		///<summary>Generated by OD. Includes [ConfirmCode] replacement tag and (optionally) [URL] replacement tag. OD proper can construct this to be any length.
		///Will be converted to final EmailText and emailed to patient once tags are replaced with real values.</summary>
		[CrudColumn(SpecialType = CrudSpecialColType.TextIsClob)]
		public string EmailTextTemplate;
		///<summary>Generated by HQ. Applied real text to tags from EmailTextTemplate.</summary>
		[CrudColumn(SpecialType = CrudSpecialColType.TextIsClob)]
		public string EmailText;
		///<summary>Generated by OD. Timestamp when EConnector sent this ApptThankYouSent to HQ. Stored in local customer timezone.</summary>
		[CrudColumn(SpecialType=CrudSpecialColType.DateT)]
		public DateTime DateTimeThankYouTransmit;
		///<summary>Enum:AutoCommStatus Generated by OD in some cases and HQ in others. Indicates current status in the lifecycle of this ApptThankYouSent.</summary>
		public AutoCommStatus Status;
		///<summary>Generated by HQ. Identifies this ApptThankYouSent in future transactions between HQ and OD. Will be used for email thankyous only.</summary>
		public string ShortGuidEmail;
		///<summary>Generated by HQ. Identifies this ApptThankYouSent in future transactions between HQ and OD. Will be used for sms thankyous only.</summary>
		public string ShortGUID;

		///<summary>Used only for serialization purposes</summary>
		[XmlElement("TSPrior",typeof(long))]
		public long TSPriorXml {
			get {
				return TSPrior.Ticks;
			}
			set {
				TSPrior=TimeSpan.FromTicks(value);
			}
		}

		public bool IsValidDuration {
			get {
				return TSPrior.TotalDays>0;
			}
		}
		public bool IsSameDay {
			get {
				return IsValidDuration&&TSPrior.TotalDays<1;
			}
		}

		public bool IsFutureDay {
			get {
				return IsValidDuration&&TSPrior.TotalDays>=1;
			}
		}

		public int DaysInFuture {
			get {
				if(!IsFutureDay) {
					return 0;
				}
				//Rounds 1.1 to 2. So anything greater than exactly n days will be n+1 days.
				return (int)Math.Ceiling(TSPrior.TotalDays);
			}
		}

		public int NumMinutesPrior {
			get {
				if(!IsSameDay) {
					return 0;
				}
				return (int)TSPrior.TotalMinutes;
			}
		}

		public ApptThankYouSent Copy() {
			return (ApptThankYouSent)MemberwiseClone();
		}
	}

}
